/*using System;
using System.Collections.Generic;
using System.Linq;

public static class Change
{
    public static int[] FindFewestCoins(int[] coins, int target)
    {
        var changeMap = new Dictionary<int, List<int>> {[0] = new List<int>()};
        var queue = new Queue<int>();
        queue.Enqueue(0);

        while (queue.Count > 0)
        {
            int value = queue.Dequeue();

            if (value == target)
                return changeMap[value].OrderBy(x => x).ToArray();

            foreach (var coin in coins)
            {
                int nextValue = value + coin;

                if (nextValue > target) break;
                if (changeMap.ContainsKey(nextValue)) continue;

                var coinsChange = new List<int>(changeMap[value]) {coin};

                changeMap[nextValue] = coinsChange;
                queue.Enqueue(nextValue);
            }
        }

        throw new ArgumentException();
    }
}*/